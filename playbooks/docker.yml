# docker.yml

# Authors: 
#   Andreas RÃ¤der, https://github.com/raederan 
#   Simon Stier, https://github.com/simontaurus

# Begin: Check Ansible User
- name: Check Ansible User
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: false
  tasks:
    - name: Fail reliably if 'ansible_user' is not defined
      fail:
        msg: "You need to set the ansible_user by using the flag -u <USERNAME> or in inventory when running the playbook!"
      when: ansible_user is not defined

    - name: Print 'ansible_user'
      debug:
        msg: "ansible_user: {{ ansible_user }}"
      when: ansible_user is defined
# End: Check Ansible User

# Begin: Prerequisites
- name: Prerequisites
  hosts: "{{ target_hosts | default('all') }}"
  gather_facts: false
  become: yes
  become_user: root
  tasks:
    - name: Verify SSH connection
      ansible.builtin.wait_for_connection:
      
    - name: Cloud-init done
      ansible.builtin.raw:  while [ ! -f /var/lib/cloud/instance/boot-finished]; do sleep 10s; done
      changed_when: false

    - name: Check if Python 3 symlink exists
      ansible.builtin.stat:
        path: /usr/bin/python
      register: python_symlink

    - name: Create Python 3 symlink if not exists
      ansible.builtin.raw: ln -s /usr/bin/python3 /usr/bin/python
      when: not python_symlink.stat.exists

    - name: Ensure group "dev" exists
      ansible.builtin.group:
        name: dev
        state: present

    - name: Install python3-pip
      apt: 
        name: python3-pip
        update_cache: yes
        state: latest
# End: Prerequisites

# Begin: Setup Docker
- name: Setup Docker
  hosts: "{{ target_hosts | default('all') }}"
  become: yes
  become_user: root
  gather_facts: true
  tasks:
    - name: Install required packages ca-certificates, curl, gnupg
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Check if Docker's official GPG key exists
      ansible.builtin.stat:
        path: /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg
      register: gpg_check

    - name: Add Docker's official GPG key [{{ linux_dist }}]
      shell: curl -fsSL https://download.docker.com/linux/{{ linux_dist }}/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker-archive-keyring.gpg
      when: not gpg_check.stat.exists

    - name: Add Docker repository [{{ linux_dist }}]
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker-archive-keyring.gpg] https://download.docker.com/linux/{{ linux_dist }} {{ ansible_distribution_release }} stable"
        state: present
      when: not gpg_check.stat.exists

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose
        update_cache: yes

    - name: Create 'docker-container' directory
      file:
        path: /usr/local/docker-container
        state: directory
        owner: "{{ ansible_user }}"
        group: dev
        mode: 0775

    - name: Ensure group 'docker' exists
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add 'ansible_user' to groups 'dev, docker, www-data'
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: dev,docker,www-data
        append: yes

    # only if '-e reboot=true' is set
    - name: Reboot remote host to refresh groups
      reboot:
      register: reboot_result
      when: reboot is defined and reboot=='yes' # string 'yes' is needed here (semaphore)
      
    # only if '-e reboot=true' is set
    - name: Wait for remote host to come back online
      wait_for_connection:
        delay: 20
        sleep: 10
        connect_timeout: 5
        timeout: 300
      when: reboot_result is defined and reboot_result.changed
# End: Setup Docker


      