# osw.yml

# Authors: 
#   Andreas RÃ¤der, https://github.com/raederan 

# Begin: Check Ansible User
- name: Check Ansible User
  hosts: "{{ target_hosts | default('all') }}"
  vars:
    name: osw # used as folder name
  gather_facts: false
  tasks:
    - name: Fail reliably if 'ansible_user' is not defined
      fail:
        msg: "You need to set the ansible_user by using the flag -u <USERNAME> when running the playbook!"
      when: ansible_user is not defined

    - name: Print 'ansible_user'
      debug:
        msg: "ansible_user: {{ ansible_user }}"
      when: ansible_user is defined
# End: Check Ansible User

# Begin: Deploy Open Semantic World (OSW)
- name: Deploy Open Semantic World (OSW)
  hosts: "{{ target_hosts | default('all') }}"   
  tasks:
    - name: Verify SSH connection
      ansible.builtin.wait_for_connection:

    - name: Clone Open Semantic World (OSW) repository
      ansible.builtin.git:
        repo: https://github.com/OpenSemanticLab/osl-mw-docker-compose.git
        dest: /usr/local/docker-container/{{ name }}
        version: "{{ git_osw_version }}"
    
    - name: Change ownership of osw/mediawiki/data directory
      ansible.builtin.file:
        path: /usr/local/docker-container/{{ name }}/mediawiki/data
        owner: "{{ ansible_user }}"
        group: www-data
        state: directory
        mode: 0775

    - name: Copy .env.example to .env
      ansible.builtin.copy:
        src: /usr/local/docker-container/{{ name }}/.env.example
        dest: /usr/local/docker-container/{{ name }}/.env
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: 0644
        force: no

    - name: Create/Replace values by key dict in .env file
      lineinfile:
        path: /usr/local/docker-container/{{ name }}/.env
        regexp: "^{{ item.key }}=.*$" 
        line: "{{ item.key }}={{ item.value }}" 
        backrefs: no # yes enables capture groups
      # dict refers to new untracked .env copied from .env.example
      # https://github.com/OpenSemanticLab/docker-compose-osl-wiki/blob/main/.example.env
      # add or change valid key-value pairs to your needs and set vars in inventory.yml
      with_dict: 
        MYSQL_ROOT_PASSWORD: "{{ admin_password }}"
        MW_DB_PASS: "{{ admin_password }}"
        MW_ADMIN_PASS: "{{ admin_password }}"
        MW_SITE_SERVER: "https://{{ domain }}"
        DRAWIO_SERVER: "https://drawio.{{ domain }}"
        GRAPHDB_SERVER: "https://graph.{{ domain }}"

    - name: Replace multiline values by key dict in .env file
      ansible.builtin.replace:
        path: /usr/local/docker-container/{{ name }}/.env
        # matches key="value" or key=value or key="\nvalue\n"
        # but does not ensure existence of key
        regexp: '{{ item.key }}=\"[^\"]*\"|{{ item.key }}=[^\n]*$'
        replace: "{{ item.key }}={{ item.value }}"
      with_dict: 
        MW_PAGE_PACKAGES: "{{ packages }}"

    - name: Copy Compose Override Caddy
      ansible.builtin.copy:
        src: /usr/local/docker-container/{{ name }}/docker-compose.caddy.example.override.yml
        dest: /usr/local/docker-container/{{ name }}/docker-compose.override.yml
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: 0644
        force: yes

    - name: Deploy Compose Open Semantic World (OSW)
      community.docker.docker_compose:
        project_src: /usr/local/docker-container/{{ name }}
        pull: true
        state: present
      register: osw

    - name: Wait until HTTP status is 200
      uri:
        url: 'https://{{ domain }}'
        return_content: yes
        validate_certs: yes
        status_code:
          - 200
      until: uri_output.status == 200
      delay: 10     # every 10 seconds
      retries: 60   # total 10 min
      register: uri_output

    - name: Display OSW Domain
      debug: 
        msg: "OSW has been deployed successfully, visit: https://{{ domain }}"
      failed_when: uri_output.status != 200
# End: Deploy Open Semantic World (OSW)